service: serverless-rest-api-with-dynamodb

frameworkVersion: "2.70.0"

#useDotenv: true
#variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
#        - cloudsearch:*
#      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
      Resource: "arn:aws:dynamodb:us-east-1:733698491396:table/Products"
#     Resource: "arn:aws:cloudsearch:us-east-1:733698491396:domain/product-search"
#      Resource: '*'
    - Effect: Allow
      Action:
        - cloudsearch:*
      Resource: "arn:aws:cloudsearch:us-east-1:733698491396:domain/business-search"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:733698491396:table/ZipCodes"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:733698491396:table/States"


functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  listAUTH:
    handler: todos/list.list
    events:
      - http:
          path: todos/auth
          method: get
          cors: true

  echoback:
    handler: todos/echoback.echoback
    events:
      - http:
          path: todos/echoback
          method: get
          cors: true


  Stateslist:
    handler: todos/Stateslist.Stateslist
    events:
      - http:
          path: todos/statesList
          method: get
          cors: true


  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  getauth:
    handler: todos/getauth.getauth
    events:
      - http:
          path: todos/getauth
          method: get
          cors: true
  search:
    handler: todos/search.search
    events:
      - http:
          path: todos/search/{id}
          method: get
          cors: true

  searchZip:
    handler: todos/searchZip.searchZip
    events:
      - http:
          path: todos/searchZip/{zipcode}
          method: get
          cors: true

  Citieslist:
    handler: todos/Citieslist.Citieslist
    events:
      - http:
          path: todos/Citieslist/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  updateAuth:
    handler: todos/updateAuth.updateAuth
    events:
      - http:
          path: todos/updateauth
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
